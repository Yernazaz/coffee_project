import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram import types
import buttons as nav
import os
import csv


BOT_TOKEN = "5423997060:AAHG2ecBeY-0lKwU-ma6H7W_MRyfLOQ2u_U"
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    fullname = State()
    city = State()
    position = State()
    hobby = State()


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '/start':
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é\n–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, "
            "—Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
            "–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ—á–∏—Ç–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. ", reply_markup=nav.create)
    elif message.text == '–ü–æ–µ—Ö–∞–ª–∏!':
        try:
            conn = sqlite3.connect("project.db")
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM `users` WHERE `telegram`=?", [message.from_user.username], )
            result = cursor.fetchall()
            conn.commit()

            if result == []:
                await Form.fullname.set()
                await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é ")

                @dp.message_handler(state=Form.fullname)
                async def process_name(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['fullname'] = message.text

                    await Form.next()
                    await message.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥")

                @dp.message_handler(state=Form.city)
                async def process_city(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['city'] = message.text
                    await Form.next()
                    await message.reply(" –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å/—Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏\n–ü—Ä–∏–º–µ—Ä: –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤")

                @dp.message_handler(state=Form.position)
                async def process_work(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['position'] = message.text
                    await Form.next()
                    await message.reply("–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–≤–æ–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É?")

                @dp.message_handler(state=Form.hobby)
                async def process_gender(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['hobby'] = message.text
                        username = message.from_user.username
                        try:
                            cursor.execute(
                                "INSERT INTO `users` (`full_name`, `city`, `position`, `hobby`, `telegram`) VALUES (?, ?, ?, ?, ?)",
                                (data['fullname'],
                                 data['city'],
                                 data['position'],
                                 data['hobby'],
                                 str(username)
                                 ))
                            await bot.send_message(
                                message.chat.id, f'–°—É–ø–µ—Ä! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n–ò–º—è: {data["fullname"]}\n'
                                                 f'–ì–æ—Ä–æ–¥: {data["city"]}\n'
                                                 f'–ó–∞–Ω—è—Ç–∏–µ: {data["position"]}\n'
                                                 f'–û —Å–µ–±–µ: {data["hobby"]}', reply_markup=nav.talk)
                            conn.commit()
                        except:
                            await bot.send_message(message.chat.id, 'Sorry, something went wrong1')
                        finally:
                            if (conn):
                                conn.close()
                        await state.finish()
            else:
                await bot.send_message(message.chat.id,
                                       text='–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞, –º–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–∏—Å–∫—É –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞!',
                                       reply_markup=nav.talk)
        except:
            await bot.send_message(message.chat.id, text='Sorry, something went wrong2')

    elif message.text == '–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ':
        username = str(message.from_user.username)
        conn = sqlite3.connect("project.db")
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM `users` ORDER BY RANDOM() LIMIT 1")
        partner = cursor.fetchall()
        for row in partner:
            id2 = row[0]
            name = row[1]
            city = row[2]
            work = row[3]
            hobby = row[4]
            tg2 = row[5]
        if partner == [] or tg2 == username:
            await message.reply('–ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∑–∞—Ö–æ–¥–∏ –ø–æ–ø–æ–∑–∂–µ')
        else:
            cursor.execute("SELECT * FROM `meetings` WHERE `username1` LIKE ? AND `username2` LIKE ?", (username, tg2))
            check1 = cursor.fetchall()
            cursor.execute("SELECT * FROM `meetings` WHERE `username1` LIKE ? AND `username2` LIKE ?", (tg2, username))
            check2 = cursor.fetchall()

            if check2 == check1 == []:
                await bot.send_message(
                    message.chat.id, text=f'–Ø –Ω–∞—à–µ–ª —Ç–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞. –≠—Ç–æ {name}'
                                          f'\n–ì–æ—Ä–æ–¥: {city}'
                                          f'\n–ó–∞–Ω—è—Ç–∏–µ:{work}'
                                          f'\n–û —Å–µ–±–µ:{hobby}'
                                          f'\n–í–æ—Ç –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º:@{tg2}'
                                          '\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫—É, –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞.', reply_markup=nav.go
                )
                cursor.execute("INSERT INTO `meetings`(`username1`,`username2`) VALUES (?,?)", (username, tg2))
                conn.commit()
                conn.close()
                for seconds in range(5 - 1, -1, -1):
                    await asyncio.sleep(1)
                    if seconds == 0:
                        await bot.send_message(chat_id=message.chat.id,
                                               text=f'üëãüèª–ü—Ä–∏–≤–µ—Ç!\n–ü–æ–º–Ω–∏—à—å, —è –¥–∞–≤–∞–ª —Ç–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ @{tg2}?',
                                               reply_markup=nav.yes_no)

            else:
                await message.reply('–ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∑–∞—Ö–æ–¥–∏ –ø–æ–ø–æ–∑–∂–µ')
    elif message.text == '–î–∞–≤–∞–π!':
        await message.reply('–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π, –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ —Å—Ä–∞–∑—ÉüôÇ', reply_markup=types.ReplyKeyboardRemove())
    elif message.text == '–ù–µ—Ç':
        await message.reply(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=types.ReplyKeyboardRemove())
    elif message.text == '–î–∞':
        await message.reply(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', reply_markup=types.ReplyKeyboardRemove())

conn = sqlite3.connect("project.db")
cursor = conn.cursor()
cursor.execute("select * from users")
with open("users.csv", "w") as csv_file:
    csv_writer = csv.writer(csv_file, delimiter="\t")
    csv_writer.writerow([i[0] for i in cursor.description])
    csv_writer.writerows(cursor)

dirpath = os.getcwd() + "/users.csv"

if __name__ == '__main__':
    executor.start_polling(dp)
